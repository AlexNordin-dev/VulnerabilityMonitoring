using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Moq;
using VulnerabilityMonitoring.Controllers;
using VulnerabilityMonitoring.Models.Dtos;
using VulnerabilityMonitoring.Models.ViewModels;
using VulnerabilityMonitoring.Services.API;
using VulnerabilityMonitoring.Services.Application;

namespace VulnerabilityMonitoring.Tests.Controller
{
    public class AddProjectController_Tests
    {
        private readonly Mock<ILogger<AddProjectController>> _mockLogger;
        private readonly Mock<IAzureDevOpsService> _mockAzureDevOpsService;
        private readonly Mock<IProjectManagementService> _mockManagementService;
        private readonly AddProjectController _controller;

        public AddProjectController_Tests()
        {
            _mockLogger = new Mock<ILogger<AddProjectController>>();
            _mockAzureDevOpsService = new Mock<IAzureDevOpsService>();
            _mockManagementService = new Mock<IProjectManagementService>();
            _controller = new AddProjectController(_mockLogger.Object, _mockAzureDevOpsService.Object, _mockManagementService.Object);
        }

        [Fact]
        public async Task AddProject_ReturnsBadRequest_WhenModelStateIsInvalid()
        {
            // Arrange
            _controller.ModelState.AddModelError("error", "Invalid data");

            // Act
            var result = await _controller.AddProject(new AddProjectDto());

            // Assert
            var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
            Assert.Equal(400, badRequestResult.StatusCode);
        }

        [Fact]
        public async Task AddProject_ReturnsOk_WhenProjectIsAddedSuccessfully()
        {
            // Skapa en mockad instans av ProjectViewModel
            var mockProjectViewModel = new ProjectViewModel
            {
                RepositoryId = Guid.NewGuid(),
            };

            // Ändra setup för SaveRepositoryFilesLocallyAsync att returnera mockProjectViewModel
            _mockAzureDevOpsService.Setup(service => service.SaveRepositoryFilesLocallyAsync(It.IsAny<Guid>()))
                .ReturnsAsync(mockProjectViewModel);

            // Om SaveProjectAsync förväntar sig en ProjectViewModel, säkerställ att detta stämmer
            _mockManagementService.Setup(service => service.SaveProjectAsync(It.IsAny<ProjectViewModel>()))
                .ReturnsAsync(true);

            // Act
            var result = await _controller.AddProject(new AddProjectDto { RepositoryId = Guid.NewGuid() });

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            Assert.Equal(200, okResult.StatusCode);

        }

    }
}
