using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Serilog;
using System.Text;

namespace VulnerabilityMonitoring.Authentication;

public class BasicAuth : IAuthorizationFilter
{
    private readonly IConfiguration _configuration;

    public BasicAuth(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    public void OnAuthorization(AuthorizationFilterContext context)
    {
        // Hämta authorization header från request
        string authorizationHeader = context.HttpContext.Request.Headers.Authorization;

        if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith("Basic ", StringComparison.OrdinalIgnoreCase))
        {
            context.Result = new UnauthorizedResult();
            Log.Warning("Authorization header is missing or invalid");
            return;
        }

        // Hämta token från authorization header
        string token = authorizationHeader.Substring(6).Trim();

        // Dekodera token från Base64 till plaintext användarnamn och lösenord
        string decodedToken = Encoding.UTF8.GetString(Convert.FromBase64String(token));

        // Dela upp användarnamn och lösenord
        string[] credentials = decodedToken.Split(':');
        string username = credentials[0];
        string password = credentials[1];

        // Hämta förväntade användaruppgifter från konfigurationen
        string expectedUsername = _configuration["BasicAuthConfig:Username"];
        string expectedPassword = _configuration["BasicAuthConfig:Password"];

        // Jämför användarnamn och lösenord med de förväntade uppgifterna
        if (username == expectedUsername && password == expectedPassword)
        {
            Log.Information("User {Username} is authenticated", username);
            return;
        }

        context.Result = new UnauthorizedResult();
        Log.Warning("User {Username} is not authenticated", username);
        return;

    }
}