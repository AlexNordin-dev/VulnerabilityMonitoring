using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using VulnerabilityMonitoring.Models;
using VulnerabilityMonitoring.Models.AccountViewModels;
using VulnerabilityMonitoring.Models.Identity;
using VulnerabilityMonitoring.Services.Account;

namespace VulnerabilityMonitoring.Controllers;

public class AdminController : Controller
{
    private readonly UserManager<IdentityUser> _userManager;
    private readonly SignInManager<IdentityUser> _signInManager;
    private readonly IdentityContext _identityContext;
    private readonly RoleManager<IdentityRole> _roleManager;
    private readonly IAccountService _userService;
    private readonly IProfileService _profileService;
    public AdminController(UserManager<IdentityUser> userManager, SignInManager<IdentityUser> signInManager, IdentityContext identityContext, RoleManager<IdentityRole> roleManager, IAccountService userService, IProfileService profileService)
    {
        _userManager = userManager;
        _signInManager = signInManager;
        _identityContext = identityContext;
        _roleManager = roleManager;
        _userService = userService;
        _profileService = profileService;
    }

    [AllowAnonymous]
    public async Task<IActionResult> Installation(string ReturnUrl = null!)
    {
        if (await _userManager.Users.AnyAsync())
            return RedirectToAction("Login", "Account");

        var form = new RegisterViewModel
        {
            ReturnUrl = ReturnUrl ?? Url.Content("~/")
        };

        return View(form);
    }

    [AllowAnonymous]
    [HttpPost]
    public async Task<IActionResult> Installation(RegisterViewModel form)
    {
        if (ModelState.IsValid)
        {
            if (!await _roleManager.Roles.AnyAsync())
            {
                await _roleManager.CreateAsync(new IdentityRole("Admin"));
                await _roleManager.CreateAsync(new IdentityRole("Developer"));
            }

            var identityUser = new IdentityUser
            {
                Email = form.Email,
                UserName = form.Email
            };

            var result = await _userManager.CreateAsync(identityUser, form.Password);
            if (result.Succeeded)
            {
                _identityContext.UserProfile.Add(new UserProfileEntity
                {
                    UserId = identityUser.Id,
                    FirstName = form.FirstName,
                    LastName = form.LastName,
                    Email = form.Email,
                    CreatedAt = DateTime.Now,
                    ImageName = string.Empty

                });
                await _identityContext.SaveChangesAsync();

                await _userManager.AddToRoleAsync(identityUser, "Admin");

                var signInResult = await _signInManager.PasswordSignInAsync(identityUser, form.Password, false, false);
                if (signInResult.Succeeded)
                    return LocalRedirect(form.ReturnUrl);
                else
                    return RedirectToAction("Login", "Account");


            }
        }

        ModelState.AddModelError(string.Empty, "Unable to create an Account.");
        return View(form);
    }

    [HttpGet]
    public async Task<IActionResult> Index()
    {
        var data = await _userService.GetAllAsync();
        return View(data);
    }
    //public async Task<IActionResult> Edit(Guid id)
    //{
    //    var UserProfileEdit = await _userService.GetByIdAsync(id);
    //    if (UserProfileEdit == null) { return View("NotFound"); }

    //    var profileEntity = new RegisterViewModel()
    //    {
    //        UserId = UserProfileEdit.Id,
    //        FirstName = UserProfileEdit.FirstName,
    //        LastName = UserProfileEdit.LastName,


    //    };



    //    return View(profileEntity);
    //}

    ////Set
    //[HttpPost]
    //public async Task<IActionResult> Edit(Guid id, UpdateUserProfileVM userProfile)
    //{
    //    if (id != userProfile.Id) return View("NotFound");

    //    if (userProfile.ProfileImage != null)
    //        userProfile.Image = await _profileService.UploadProfileImageAsync(userProfile.ProfileImage);

    //    await _userService.UpdateAsync(userProfile);
    //    return RedirectToAction(nameof(Index));
    //}
    //-------------------------
    public async Task<IActionResult> Delete(string id)
    {
        var deleteuser = await _userService.GetByIdAsync(id);
        if (deleteuser == null) { return View("NotFound"); }


        return View(deleteuser);
    }
    //Set
    [HttpPost, ActionName("Delete")]
    public async Task<IActionResult> DeleteAsync(string id)
    {
        var user = await _userService.GetByIdAsync(id);
        if (user == null) { return View("NotFound"); }
        await _userService.DeleteAsync(user.Id);


        return RedirectToAction(nameof(Index));
    }
}
