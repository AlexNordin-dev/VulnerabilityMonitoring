using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using VulnerabilityMonitoring.Models;
using VulnerabilityMonitoring.Models.AccountViewModels;
using VulnerabilityMonitoring.Models.Identity;

namespace VulnerabilityMonitoring.Services.Account;
// interface
public interface IAccountService
{
    Task<bool> UpdateProfileAsync(ProfileViewModel userProfil);
    Task<bool> UpdateSeverityAsync(SettingViewModel userProfile, Guid Id);
    Task<bool> DeleteAsync(Guid id);
    Task<IEnumerable<UserProfileEntity>> GetAllAsync();
    Task<UserProfileEntity> GetByIdAsync(string id);
    Task<UserProfileEntity> GetProfileIdAsync(Guid id);
    Task<UserProfileEntity> Register(RegisterViewModel model);
}
public class AccountService : IAccountService
{
    private readonly UserManager<IdentityUser> _userManager;
    private readonly SignInManager<IdentityUser> _signInManager;
    private readonly IdentityContext _identityDB;
    private readonly IProfileService _profile;

    public AccountService(UserManager<IdentityUser> userManager, IdentityContext identityDB, IProfileService profile, SignInManager<IdentityUser> signInManager)
    {
        _userManager = userManager;
        _identityDB = identityDB;
        _profile = profile;
        _signInManager = signInManager;
    }

    public async Task<bool> UpdateProfileAsync(ProfileViewModel userProfile)
    {
        var db = await _identityDB.UserProfile.FindAsync(userProfile.Id);
        if (db != null)
        {

            db.FirstName = userProfile.FirstName;
            db.LastName = userProfile.LastName;
            db.Email = userProfile.Email;
            db.ImageName = userProfile.ImageName;

            await _identityDB.SaveChangesAsync();
        }
        return true;
    }
    public async Task<bool> UpdateSeverityAsync(SettingViewModel userProfile, Guid Id)
    {
        var db = await _identityDB.UserProfile.FindAsync(Id);
        if (db != null)
        {

            db.EnableHighSeverity = userProfile.EnableHighSeverity;
            db.EnableModerateSeverity = userProfile.EnableModerateSeverity;
            db.EnableCriticalSeverity = userProfile.EnableCriticalSeverity;
            db.EnableAllSeverity = userProfile.EnableAllSeverity;
            db.DisableNotifications = userProfile.DisableNotifications;
            _identityDB.UserProfile.Update(db);
            await _identityDB.SaveChangesAsync();
        }
        return true;
    }

    public async Task<bool> DeleteAsync(Guid id)
    {
        var result = await _identityDB.FindAsync<UserProfileEntity>(id);
        if (result == null) { return false; }
        _identityDB.UserProfile.Remove(result);
        await _identityDB.SaveChangesAsync();

        return true;
    }

    public async Task<IEnumerable<UserProfileEntity>> GetAllAsync()
    {
        try
        {
            var result = await _identityDB.UserProfile.ToListAsync();
            if (result == null) { return null!; }
            return result;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }


    public async Task<UserProfileEntity> GetByIdAsync(string id)
    {
        var result = await _identityDB.UserProfile.FirstOrDefaultAsync(x => x.UserId == id);
        return result!;
    }
    public async Task<UserProfileEntity> GetProfileIdAsync(Guid id)
    {

        var result = await _identityDB.UserProfile.FirstOrDefaultAsync(x => x.Id == id);
        return result!;
    }

    public async Task<UserProfileEntity> Register(RegisterViewModel model)
    {
        if (await _userManager.Users.AnyAsync(x => x.Email == model.Email))
        {
            return null!;
        }
        var identityUser = new IdentityUser { UserName = model.Email, Email = model.Email };
        var result = await _userManager.CreateAsync(identityUser, model.Password);
        if (result.Succeeded)
        {
            var profileEntity = new UserProfileEntity
            {
                UserId = identityUser.Id,
                FirstName = model.FirstName,
                LastName = model.LastName,
                Email = model.Email,
                CreatedAt = DateTime.Now
            };
            if (model.ProfileImage != null)
                profileEntity.ImageName = await _profile.UploadProfileImageAsync(model.ProfileImage);
            _identityDB.Add(profileEntity);
            await _identityDB.SaveChangesAsync();
            await _userManager.AddToRoleAsync(identityUser, "Developer");

            var signInResult = await _signInManager.PasswordSignInAsync(identityUser, model.Password, false, false);
            if (signInResult.Succeeded)
            {
                return profileEntity;
            }
        }
        return null!;
    }

}
