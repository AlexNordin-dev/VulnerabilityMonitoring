using Microsoft.EntityFrameworkCore;
using VulnerabilityMonitoring.Models;
using VulnerabilityMonitoring.Models.Entities;
using VulnerabilityMonitoring.Models.ViewModels;

namespace VulnerabilityMonitoring.Services.Application;

public interface IProjectManagementService
{
    Task<bool> RemoveProjectAsync(Guid id);
    Task<ProjectViewModel> GetProjectAsync(Guid id);
    Task<List<VulnerableProjectViewModels>> GetAllProjectsAsync();
    Task<bool> SaveProjectAsync(ProjectViewModel model);
    Task<bool> UpdateProjectAsync(ProjectViewModel model);
    Task<bool> UpdateProjectWebHookAsync(ProjectViewModel model);
}

public class ProjectManagementService : IProjectManagementService
{
    private readonly ILogger<ProjectManagementService> _logger;

    private readonly DataContext _context;

    public ProjectManagementService(ILogger<ProjectManagementService> logger, DataContext context)
    {
        _logger = logger;
        _context = context;
    }

    public async Task<bool> SaveProjectAsync(ProjectViewModel model)
    {
        try
        {
            var project = await _context.Projects.FindAsync(model.RepositoryId);

            if (project == null)
            {
                var newProject = new ProjectEntity
                {

                    RepositoryId = model.RepositoryId,
                    ProjectSloName = model.ProjectSloName,
                    RepositoryName = model.RepositoryName,
                    ProjectsPath = model.ProjectsPath,
                    SaveDate = DateTime.Now,
                    Branch = model.Branch,
                    ProjectReference = model.ProjectReference,
                    ProjectsFramework = model.ProjectsFramework,
                    ProjectsSlnPath = model.ProjectsSlnPath,
                };

                _context.Projects.Add(newProject);
                await _context.SaveChangesAsync();
            }
            return true;
        }
        catch (Exception)
        {

            return false;
        }
    }

    public async Task<bool> UpdateProjectAsync(ProjectViewModel model)
    {
        try
        {
            var project = await _context.Projects.FindAsync(model.RepositoryId);

            if (project != null)
            {
                project.LastRunTime = DateTime.Now;

                _context.Projects.Update(project);
                await _context.SaveChangesAsync();
            }
            return true;
        }
        catch (Exception)
        {
            return false;
        }
    }
    public async Task<bool> UpdateProjectWebHookAsync(ProjectViewModel model)
    {
        try
        {
            var project = await _context.Projects.FindAsync(model.RepositoryId);

            if (project != null)
            {
                project.ProjectSloName = model.ProjectSloName;
                project.RepositoryName = model.RepositoryName;
                project.ProjectsPath = model.ProjectsPath;
                project.UpdateDate = DateTime.Now;



                _context.Projects.Update(project);
                await _context.SaveChangesAsync();
            }
            return true;
        }
        catch (Exception)
        {
            return false;
        }
    }


    public async Task<List<VulnerableProjectViewModels>> GetAllProjectsAsync()
    {
        try
        {
            // Hämta sårbara projekt från databasen
            var vulnerableProjects = await _context.Projects.ToListAsync();


            // Skapa en lista för att lagra resultatet
            var result = new List<VulnerableProjectViewModels>();

            foreach (var project in vulnerableProjects)
            {
                var vulnerableProject = new VulnerableProjectViewModels
                {
                    ProjectSloName = project.ProjectSloName,
                    RepositoryName = project.RepositoryName,
                    ProjectsPath = project.ProjectsPath,
                    LastRunTime = project.LastRunTime,
                    RepositoryId = project.RepositoryId,
                    Branch = project.Branch,
                    ProjectReference = project.ProjectReference,
                    SaveDate = project.SaveDate,
                    UpdateDate = project.UpdateDate,
                    ProjectsFramework = project.ProjectsFramework,
                    ProjectsSlnPath = project.ProjectsSlnPath,
                    VulnerableProjectPackage = new List<VulnerableProjectViewModels.VulnerablePackage>()
                };

                // Hämta sårbara paket för det aktuella projektet
                var vpackages = await _context.VulnerablePackages
                    .Where(p => p.VulnerableProjectId == project.RepositoryId)
                    .ToListAsync();

                foreach (var vpackage in vpackages)
                {
                    // Lägg till det sårbara paketet till den aktuella projektets lista
                    vulnerableProject.VulnerableProjectPackage.Add(new VulnerableProjectViewModels.VulnerablePackage
                    {
                        ProjectName = vpackage.ProjectName,
                        PackageName = vpackage.PackageName,
                        RequestedVersion = vpackage.RequestedVersion,
                        ResolvedVersion = vpackage.ResolvedVersion,
                        Severity = vpackage.Severity,
                        AdvisoryURL = vpackage.AdvisoryURL
                    });
                }


                result.Add(vulnerableProject);
            }

            return result;
        }
        catch (Exception ex)
        {

            _logger.LogError($"Exception in GetVulnerableProjects: {ex}");
            throw;
        }
    }



    public async Task<ProjectViewModel> GetProjectAsync(Guid id)
    {
        try
        {
            var project = await _context.Projects.FindAsync(id);
            if (project != null)
            {
                var existingProject = new ProjectViewModel
                {
                    RepositoryId = project.RepositoryId,
                    ProjectSloName = project.ProjectSloName,
                    RepositoryName = project.RepositoryName,
                    Branch = project.Branch,
                    LastRunTime = project.LastRunTime,
                    SaveDate = project.SaveDate,
                    UpdateDate = project.UpdateDate,
                    ProjectsPath = project.ProjectsPath
                };
                return existingProject;
            }
            return null!;
        }
        catch (Exception)
        {
            return null!;
        }
    }


    public async Task<bool> RemoveProjectAsync(Guid id)
    {
        try
        {
            var project = await _context.Projects.FirstOrDefaultAsync(x => x.RepositoryId == id);
            if (project != null)
            {
                _context.Projects.Remove(project);
                await _context.SaveChangesAsync();
                return true;
            }
            return false;
        }
        catch (Exception)
        {
            return false;
        }
    }

}