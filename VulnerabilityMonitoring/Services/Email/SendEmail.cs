using MailKit.Net.Smtp;
using MailKit.Security;
using Microsoft.Extensions.Options;
using MimeKit;
using System.Text;
using VulnerabilityMonitoring.Models.Config;
using VulnerabilityMonitoring.Models.ViewModels;
using VulnerabilityMonitoring.Services.Account;

namespace VulnerabilityMonitoring.Services.Email
{
    public interface ISendEmail
    {
        Task SendEmailAsync(MimeMessage message);
        Task SendVulnerabilityWarningEmailAsync(VulnerableProjectViewModels viewModel);
    }

    public class SendEmail : ISendEmail
    {
        private readonly EmailSettings _emailSettings;
        private readonly ILogger<SendEmail> _logger;
        private readonly IAccountService _accountService;
        private static int emailCount = 0;
        public SendEmail(IOptions<EmailSettings> emailSettings, ILogger<SendEmail> logger, IAccountService accountService)
        {
            _emailSettings = emailSettings.Value;
            _logger = logger;
            _accountService = accountService;
        }


        public async Task SendVulnerabilityWarningEmailAsync(VulnerableProjectViewModels viewModel)
        {
            var users = await _accountService.GetAllAsync();
            foreach (var user in users)
            {
                var emailBodyBuilder = new StringBuilder();
                bool sendEmail = false;

                // Nu hanterar vi bara ett projekt per ViewModel
                bool projectHasRelevantVulnerabilities = viewModel.VulnerableProjectPackage.Any(
                    vp => (vp.Severity == "High" && user.EnableHighSeverity) ||
                          (vp.Severity == "Moderate" && user.EnableModerateSeverity) ||
                          (vp.Severity == "Critical" && user.EnableCriticalSeverity) ||
                          user.EnableAllSeverity);

                if (projectHasRelevantVulnerabilities)
                {
                    sendEmail = true;
                    emailBodyBuilder.AppendLine($"Project: {viewModel.RepositoryName} has vulnerabilities. Please take action immediately.");
                    foreach (var package in viewModel.VulnerableProjectPackage)
                    {
                        if ((package.Severity == "High" && user.EnableHighSeverity) ||
                            (package.Severity == "Moderate" && user.EnableModerateSeverity) ||
                            (package.Severity == "Critical" && user.EnableCriticalSeverity) ||
                            user.EnableAllSeverity)
                        {
                            emailBodyBuilder.AppendLine($"- {package.PackageName} has a {package.Severity} severity vulnerability.");
                        }
                    }
                    emailBodyBuilder.AppendLine();
                }

                if (sendEmail)
                {
                    await SendEmailForProject(user.Email, emailBodyBuilder.ToString(), viewModel.ProjectSloName);
                }
            }
        }

        private async Task SendEmailForProject(string recipientEmail, string emailBody, string projectName)
        {
            var message = new MimeMessage();
            message.From.Add(new MailboxAddress(_emailSettings.SenderName, _emailSettings.Username));
            message.To.Add(new MailboxAddress(recipientEmail, recipientEmail));
            message.Subject = $"Vulnerability Warning for {projectName}";

            var builder = new BodyBuilder
            {
                TextBody = emailBody
            };

            message.Body = builder.ToMessageBody();

            try
            {
                using (var client = new SmtpClient())
                {
                    await client.ConnectAsync(_emailSettings.Host, _emailSettings.Port, SecureSocketOptions.StartTls);
                    await client.AuthenticateAsync(_emailSettings.Username, _emailSettings.Password);
                    await client.SendAsync(message);
                    await client.DisconnectAsync(true);
                    _logger.LogInformation($"Email sent successfully for project: {projectName} to: {recipientEmail}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error sending email for project: {projectName}: {ex}");
            }
        }


        //public async Task SendVulnerabilityWarningEmailAsync(VulnerableProjectViewModels viewModel)
        //{
        //    var users = await _accountService.GetAllAsync();
        //    foreach (var user in users)
        //    {
        //        foreach (var package in viewModel.VulnerableProjectPackage)
        //        {
        //            bool shouldSendEmail = false;
        //            switch (package.Severity)
        //            {
        //                case "High":
        //                    shouldSendEmail = user.EnableHighSeverity;
        //                    break;
        //                case "Moderate":
        //                    shouldSendEmail = user.EnableModerateSeverity;
        //                    break;
        //                case "Critical":
        //                    shouldSendEmail = user.EnableCriticalSeverity;
        //                    break;
        //            }

        //            if (user.EnableAllSeverity)
        //            {
        //                shouldSendEmail = true;  // Ensure email is sent if all severities are enabled
        //            }

        //            if (shouldSendEmail)
        //            {
        //                await SendEmailForSeverity(viewModel, package, user.Email);
        //            }
        //        }
        //    }
        //}

        //private async Task SendEmailForSeverity(VulnerableProjectViewModels viewModel, VulnerableProjectViewModels.VulnerablePackage package, string recipientEmail)
        //{
        //    var message = new MimeMessage();
        //    message.From.Add(new MailboxAddress(_emailSettings.SenderName, _emailSettings.Username));
        //    message.To.Add(new MailboxAddress(recipientEmail, recipientEmail));  // Assuming recipientEmail is correct
        //    message.Subject = $"Vulnerability Warning. Project: {viewModel.ProjectSloName}";

        //    var builder = new BodyBuilder
        //    {
        //        TextBody = $"The project {viewModel.ProjectSloName} has vulnerabilities with severity {package.Severity}. Please take action immediately."
        //    };

        //    message.Body = builder.ToMessageBody();

        //    try
        //    {
        //        using (var client = new SmtpClient())
        //        {
        //            await client.ConnectAsync(_emailSettings.Host, _emailSettings.Port, SecureSocketOptions.StartTls);
        //            await client.AuthenticateAsync(_emailSettings.Username, _emailSettings.Password);
        //            await client.SendAsync(message);
        //            await client.DisconnectAsync(true);
        //            _logger.LogInformation($"Email sent successfully for project: {viewModel.ProjectSloName} to: {recipientEmail}");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError($"Error sending email for project: {viewModel.ProjectSloName}: {ex}");
        //    }
        //}



        public Task SendEmailAsync(MimeMessage message)
        {


            return Task.CompletedTask;
        }
    }
}
