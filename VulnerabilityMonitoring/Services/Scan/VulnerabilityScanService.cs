using Microsoft.EntityFrameworkCore;
using System.Diagnostics;
using VulnerabilityMonitoring.Models;
using VulnerabilityMonitoring.Models.Entities;
using VulnerabilityMonitoring.Models.ViewModels;

namespace VulnerabilityMonitoring.Services.Scan
{
    public interface IVulnerabilityScanService
    {
        Task<string> RunVulnerabilityScanAsync(VulnerableProjectViewModels viewModel);
        Task<VulnerableProjectViewModels> GetVulnerabilityScanResultAsync(VulnerableProjectViewModels viewModel);
        Task<VulnerableProjectViewModels> RunVulnerabilityScanResultAsync(VulnerableProjectViewModels viewModel);

    }

    public class VulnerabilityScanService : IVulnerabilityScanService
    {

        private readonly DataContext _dbContext;
        private readonly ILogger<VulnerabilityScanService> _logger;


        public VulnerabilityScanService(DataContext dbContext, ILogger<VulnerabilityScanService> logger)
        {

            _dbContext = dbContext;
            _logger = logger;
        }

        public async Task<string> RunVulnerabilityScanAsync(VulnerableProjectViewModels viewModel)
        {
            try
            {

                var scriptFolder = "PowerScripts";
                var scanFramework = "scan-framework.ps1";


                if (viewModel.ProjectsFramework == "Core")
                {
                    var slnDirectory = Path.GetDirectoryName(viewModel.ProjectsSlnPath);
                    viewModel.ProjectsSlnPath = slnDirectory!;
                    var scancore = await ScanCore(viewModel);
                    return scancore;

                }
                if (viewModel.ProjectsFramework == "Framework")
                {
                    var scriptPaths = Path.Combine(Environment.CurrentDirectory, scriptFolder, scanFramework);
                    var projectRoot = Path.GetDirectoryName(viewModel.ProjectsSlnPath);
                    var coreVersionPath = Path.Combine(projectRoot!, "CoreVersionProjecMapp");
                    if (Directory.Exists(coreVersionPath))
                    {
                        viewModel.ProjectsSlnPath = coreVersionPath;
                        var scancore = await ScanCore(viewModel);
                        return scancore;
                    }
                    else
                    {
                        var startInfo = new ProcessStartInfo
                        {
                            FileName = "powershell.exe",
                            Arguments = $"-File \"{scriptPaths}\" -projectRoot \"{projectRoot}\"",
                            RedirectStandardInput = true,
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                            UseShellExecute = false,
                            CreateNoWindow = true
                        };

                        using (var process = new Process { StartInfo = startInfo })
                        {
                            process.Start();
                            string result = await process.StandardOutput.ReadToEndAsync();
                            string error = await process.StandardError.ReadToEndAsync();
                            process.WaitForExit();
                            return string.IsNullOrEmpty(error) ? result : error;
                        }
                    }
                }

                return "Something went wrong";

            }
            catch (Exception ex)
            {
                _logger.LogError($"Exception in RunVulnerabilityScan: {ex}");
                return $"Exception in RunVulnerabilityScan: {ex}";
            }

        }


        private async Task<string> ScanCore(VulnerableProjectViewModels viewModel)
        {
            var scriptFolder = "PowerScripts";
            var scanCore = "scan-core.ps1";
            var scriptPaths = Path.Combine(Environment.CurrentDirectory, scriptFolder, scanCore);
            var startInfo = new ProcessStartInfo
            {
                FileName = "powershell.exe",
                RedirectStandardInput = true,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };
            using (var process = new Process { StartInfo = startInfo })
            {
                process.Start();

                using (var sw = process.StandardInput)
                {
                    if (sw.BaseStream.CanWrite)
                    {

                        sw.WriteLine($"cd {viewModel.ProjectsSlnPath}");


                        // Kör PowerShell-skriptet
                        sw.WriteLine($"& '{scriptPaths}'");

                        // Stäng standardinput för att indikera slutet av input
                        sw.Close();
                    }
                }
                string result = await process.StandardOutput.ReadToEndAsync();
                string error = await process.StandardError.ReadToEndAsync();
                process.WaitForExit();
                return result;

            }
        }


        public async Task<VulnerableProjectViewModels> GetVulnerabilityScanResultAsync(VulnerableProjectViewModels viewModel)
        {
            try
            {

                var scanResult = await RunVulnerabilityScanAsync(viewModel);

                VulnerableProjectViewModels vulnerableProject = new VulnerableProjectViewModels();
                vulnerableProject.ProjectSloName = viewModel.ProjectSloName;
                vulnerableProject.RepositoryId = viewModel.RepositoryId;
                vulnerableProject.RepositoryName = viewModel.RepositoryName;
                // Dela upp utdata i rader
                var lines = scanResult.Split('\n');

                bool processingVulnerablePackagesToplevel = false;
                bool processingVulnerablePackagesTransitive = false;
                string endOfVulnerablePackages = "HighModerateCriticalVulnerabilitiesFound";
                string lowLulnerabilityFound = "LowVulnerabilitiesFound";
                string noVulnerabilityFound = "NoVulnerabilitiesFound";



                // Om lines innehåller "Top-level Package" och inte "Transitive Package" och inte "HighModerateCriticalVulnerabilitiesFound"    
                foreach (var line in lines)
                {
                    if (line.Contains(lowLulnerabilityFound))
                    {
                        var vulnerablePackage = new VulnerableProjectViewModels
                        {
                            ScanInfo = "Low vulnerabilities found"
                        };



                        return vulnerableProject;
                    }

                    if (line.Contains(noVulnerabilityFound))
                    {
                        var vulnerablePackage = new VulnerableProjectViewModels
                        {
                            ScanInfo = "No vulnerabilities found"
                        };

                        return vulnerableProject;
                    }
                    // Om raden innehåller "The given project ` " spara i ProjectName
                    if (line.Contains("The given project `"))
                    {
                        //vulnerableProject.VulnerableProjectPackage.Add(new VulnerableProjectViewModels.VulnerablePackage
                        //{
                        //    ProjectName = line
                        //});
                        continue;
                    }

                    // Om raden innehåller "Project ` " spara i ProjectName
                    if (line.Contains("Project `"))
                    {
                        vulnerableProject.VulnerableProjectPackage.Add(new VulnerableProjectViewModels.VulnerablePackage
                        {
                            ProjectName = line
                        });
                        continue;
                    }

                    if (line.Contains("Top-level Package ") && !line.Contains("Transitive Package ") && !line.Contains(endOfVulnerablePackages))
                    {
                        processingVulnerablePackagesToplevel = true;
                        continue; // Hoppa över den här raden och gå vidare till nästa
                    }

                    if (!line.Contains("Top-level Package ") && line.Contains("Transitive Package ") && !line.Contains(endOfVulnerablePackages))
                    {
                        processingVulnerablePackagesTransitive = true;
                        continue;
                    }


                    if (processingVulnerablePackagesToplevel)
                    {
                        // Splitta raden vid varje mellanslag och få informationen
                        var packageInfo = line.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        // Skapa ett nytt VulnerablePackage-objekt och lägg till det i listan
                        if (packageInfo.Length >= 6)
                        {
                            var vulnerablePackage = new VulnerableProjectViewModels.VulnerablePackage
                            {
                                PackageName = packageInfo[1],
                                RequestedVersion = packageInfo[2],
                                ResolvedVersion = packageInfo[3],
                                Severity = packageInfo[4],
                                AdvisoryURL = packageInfo[5]
                            };

                            vulnerableProject.VulnerableProjectPackage.Add(vulnerablePackage);
                        }

                    }

                    if (processingVulnerablePackagesTransitive)
                    {
                        // Splitta raden vid varje mellanslag och få informationen
                        var packageInfo = line.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        // Skapa ett nytt VulnerablePackage-objekt och lägg till det i listan
                        if (packageInfo.Length >= 5 && packageInfo.Length <= 5)
                        {
                            var vulnerablePackage = new VulnerableProjectViewModels.VulnerablePackage
                            {
                                PackageName = packageInfo[1],
                                ResolvedVersion = packageInfo[2],
                                Severity = packageInfo[3],
                                AdvisoryURL = packageInfo[4]
                            };

                            vulnerableProject.VulnerableProjectPackage.Add(vulnerablePackage);
                        }
                    }

                }

                return vulnerableProject;

            }
            catch (Exception ex)
            {

                _logger.LogError($"Exception in GetVulnerabilityScanResult: {ex}");
                throw;
            }

            //return View("Index", "Something bad happend ");
        }

        public async Task<VulnerableProjectViewModels> RunVulnerabilityScanResultAsync(VulnerableProjectViewModels viewModel)
        {
            try
            {
                var scanResult = await GetVulnerabilityScanResultAsync(viewModel);

                var existingProject = await _dbContext.Projects
                    .Include(p => p.VulnerableProjectPackage)
                    .FirstOrDefaultAsync(p => p.RepositoryId == viewModel.RepositoryId);

                if (existingProject != null)
                {
                    // Hitta och ta bort den första sårbare paketet om det finns
                    var vulnerablePackage = existingProject.VulnerableProjectPackage
                        .FirstOrDefault(vp => vp.VulnerableProjectId == existingProject.RepositoryId);
                    if (vulnerablePackage != null)
                    {
                        _dbContext.VulnerablePackages.Remove(vulnerablePackage);
                    }

                    // Uppdatera projektdata baserat på scanResult
                    existingProject.LastRunTime = DateTime.Now;
                    existingProject.VulnerableProjectPackage = scanResult.VulnerableProjectPackage.Select(p => new VulnerablePackageEntity
                    {
                        ProjectName = p.ProjectName,
                        PackageName = p.PackageName,
                        RequestedVersion = p.RequestedVersion,
                        ResolvedVersion = p.ResolvedVersion,
                        Severity = p.Severity,
                        AdvisoryURL = p.AdvisoryURL
                    }).ToList();

                    // Spara alla ändringar i en operation
                    await _dbContext.SaveChangesAsync();
                    return scanResult;
                }



                return scanResult;
            }
            catch (Exception ex)
            {
                _logger.LogError($"Exception in RunVulnerabilityScanResult: {ex}");
                return null!;
            }
        }

    }
}


