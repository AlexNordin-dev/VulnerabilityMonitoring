using Coravel.Invocable;
using Microsoft.AspNetCore.SignalR;
using VulnerabilityMonitoring.Models.ViewModels;
using VulnerabilityMonitoring.Services.Application;
using VulnerabilityMonitoring.Services.Email;
using VulnerabilityMonitoring.Services.Notification;
using VulnerabilityMonitoring.Services.Scan;

namespace VulnerabilityMonitoring.Services.Schedule
{
    public class ScheduleJob : IInvocable
    {
        private readonly IHubContext<NotificationHub> _hubContext;
        private readonly ILogger<ScheduleJob> _logger;
        private readonly IVulnerabilityScanService _vulnerabilityScan;
        private readonly IProjectManagementService _managementService;
        private readonly ISendEmail _sendEmail;



        public ScheduleJob(ILogger<ScheduleJob> logger, IVulnerabilityScanService vulnerabilityScan, IProjectManagementService managementService, ISendEmail sendEmail, IHubContext<NotificationHub> hubContext)
        {
            _logger = logger;
            _vulnerabilityScan = vulnerabilityScan;
            _managementService = managementService;
            _sendEmail = sendEmail;
            _hubContext = hubContext;

        }

        public async Task Invoke()
        {
            try
            {
                // Hämta alla befintliga projekt från databasen
                var existingProjects = await _managementService.GetAllProjectsAsync();

                foreach (var project in existingProjects)
                {
                    // Skapa en instans av VulnerableProjectViewModels för det aktuella projektet
                    var viewModel = new VulnerableProjectViewModels
                    {

                        ProjectsFramework = project.ProjectsFramework,
                        ProjectsSlnPath = project.ProjectsSlnPath,
                        RepositoryId = project.RepositoryId,
                        ProjectSloName = project.ProjectSloName,
                        RepositoryName = project.RepositoryName,

                    };

                    // Kör sårbarhetsskanning för det aktuella projektet
                    var result = await _vulnerabilityScan.RunVulnerabilityScanResultAsync(viewModel);
                    if (result == null)
                    {
                        _logger.LogInformation($"ScheduleJob. Vulnerability scan failed for project: {project.ProjectSloName}");
                        continue;
                    }
                    if (result.VulnerableProjectPackage.Count > 0)
                    {
                        // Skicka e-postmeddelande om det finns sårbarheter
                        await _sendEmail.SendVulnerabilityWarningEmailAsync(result);
                    }

                    // Logga att skanningen är klar för det aktuella projektet
                    _logger.LogInformation($"ScheduleJob. Vulnerability scan completed for project: {project.ProjectSloName}");

                    // Skicka meddelande till klienten via SignalR 
                    string message = "Från ScheduleJob";
                    await _hubContext.Clients.All.SendAsync("ReceiveMessage", message);

                }
            }
            catch (Exception ex)
            {
                // Logga eventuella fel som uppstår
                _logger.LogError($"ScheduleJob. An error occurred while running vulnerability scan job: {ex}");
            }
        }
    }
}
