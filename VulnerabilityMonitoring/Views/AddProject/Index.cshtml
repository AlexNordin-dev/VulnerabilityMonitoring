@model ProjectListViewModel
@{
    ViewData["Title"] = "Add Projects";
}


<div class="content mt-5">
    <div class="container">
        <div class="row">
            <div class="col-md-12 page-header">
                <h1 class="page-title">Add Projects</h1>
            </div>
        </div>
        <hr />
        <div class="row ">
            <div class="col-md-12 col-lg-12">
                <div class="card">
                    <div class="card-header">Add New Projects</div>
                    <div class="card-body">
                        <div class="container mt-3">
                            <input type="text" id="searchInput" class="form-control" placeholder="Search for project...">
                        </div>
                        <div class="table-responsive">
                            <table class="table table-hover" id="projectTable">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Location</th>
                                        <th>Branch</th>
                                        <th>Projects</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rader fylls dynamiskt med JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>





@section scripts
{
    <script>
        "use strict";
        // Funktion för att lägga till ett nytt projekt
        async function addProject(repositoryId, branchName) {
            const url = '@Url.Action("AddProject", "AddProject")';
            const data = {
                repositoryId: repositoryId,
                branchName: branchName
            };

            try {
                const response = await axios.post(url, data, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                // Kontrollera svaret och hantera enligt status
                if (response.data.status === "success") {
                    showToastNotification(response.data.status, response.data.message);
                    fetchAndCombineProjects(); // Uppdatera tabellen
                } else {
                    showToastNotification('error', response.data.message);
                }
            } catch (error) {
                // Felhantering
                if (error.response && error.response.data) {
                    showToastNotification(error.response.data.status, error.response.data.message);
                } else {
                    showToastNotification('error', 'Unknown error occurred');
                }
            }
        }

        // Funktion för att ta bort ett projekt
        async function deleteProject(repositoryId) {
            const url = '@Url.Action("DeleteProjectAsyn", "AddProject")';
            const data = {
                repositoryId: repositoryId
            };

            try {
                const response = await axios.delete(url, {
                    data: data,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.data.status === "success") {
                    showToastNotification(response.data.status, response.data.message);
                    fetchAndCombineProjects(); // Uppdatera tabellen
                } else {
                    showToastNotification('error', response.data.message);
                }
            } catch (error) {
                if (error.response && error.response.data) {
                    showToastNotification(error.response.data.status, error.response.data.message);
                } else {
                    showToastNotification('error', 'Unknown error occurred');
                }
            }
        }

        // Funktion för att initialisera tabellen
        function initTable(data) {
            const tableBody = $('#projectTable tbody');
            tableBody.empty(); // Rensa tidigare rader

            data.forEach(item => {
                const row = `
                            <tr>
                                <td>${item.name}</td>
                                <td><a href="${item.webUrl}" target="_blank">${item.webUrl}</a></td>
                                <td>${item.branch}</td>
                                <td>${item.projectReference}</td>
                                <td>
                                    ${item.isNewProject ?
                        `<button class="btn btn-primary" onclick="addProject('${item.repositoryId}', '${item.branch}')">Add</button>` :
                        `<button class="btn btn-danger" onclick="deleteProject('${item.repositoryId}')">Delete</button>`
                    }
                                </td>
                            </tr>
                        `;
                tableBody.append(row);
            });
        }


        // Funktion för att hämta och kombinera projektdata
        async function fetchAndCombineProjects() {
            try {
                const response = await $.ajax({
                    url: '@Url.Action("GetProjectsAsync", "AddProject")',
                    method: 'GET'
                });

                let combinedData = [];
                if (response.newProjects && response.existingProjects) {
                    combinedData = response.newProjects.map(project => ({
                        ...project,
                        isNewProject: true
                    })).concat(response.existingProjects.map(project => ({
                        name: project.repositoryName,
                        webUrl: project.projectsPath,
                        branch: project.branch,
                        projectReference: project.projectReference,
                        repositoryId: project.repositoryId,
                        isNewProject: false
                    })));
                }
                initTable(combinedData);  // Initialiserar tabellen med den nya datan
            } catch (error) {
                console.log('Fel vid hämtning och kombination av projektdata:', error);
            }
        }

        // Hämta och kombinera projektdata vid sidans laddning
        $(document).ready(function () {
            fetchAndCombineProjects();
        });

        // Sökfunktion
        $(document).ready(function () {
            $("#searchInput").on("keyup", function () {
                var value = $(this).val().toLowerCase();
                $("#projectTable tbody tr").filter(function () {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
            });
        });
    </script>
}
