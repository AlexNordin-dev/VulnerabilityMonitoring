@model List<VulnerableProjectViewModels>

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div id="dashboardDataId">
    @await Html.PartialAsync("~/Views/Shared/Partials/Dashboard/_dashboardData.cshtml", Model)
</div>



@section Scripts {
    <script>
        "use strict";

        var connection = new signalR.HubConnectionBuilder().withUrl("/notificationHub").build();

        async function start() {
            try {
                await connection.start();
                console.log("SignalR connection established.");
            } catch (error) {
                console.error(error);
                setTimeout(start, 30000);
            }
        }

        connection.onclose(async () => {
            console.log("SignalR connection closed.");
            await start();
        });

        connection.on("ReceiveMessage", async function (message) {
            console.log("SignalR event received: " , message);
            await updateDashboardData();
        });

        $(function () {
            start();
        });

        async function updateDashboardData() {
            try {
                const response = await axios.get('@Url.Action("GetVulnerableProjectsAsync", "Home")'); //'/Home/GetVulnerableProjectsAsync'
                $('#dashboardDataId').html(response.data);
            } catch (error) {
                console.error('Axios error:', error);
                
            }
        }

        // new DataTable('#dataTableHome', {
        //     layout: {
        //         topStart: {
        //             buttons: ['copy', 'excel', 'pdf', 'print']
        //         }
        //     }
        // });
        // Get data with Fetch
        // async function updateDashboardData() {
        //     try {
        //         const response = await fetch('/Home/GetVulnerableProjectsAsync');
        //         if (!response.ok) {
        //             throw new Error('Network response was not ok');
        //         }                
        //         const data = await response.text();
        //         $('#dashboardDataId').html(data);
        //     } catch (error) {
        //         console.error('Fetch error:', error);                
        //     }
        // }



        document.getElementById('searchInput').addEventListener('input', function () {
            var searchValue = this.value.toLowerCase();
            var projects = document.querySelectorAll('.project-card');

            projects.forEach(function (project) {
                var projectName = project.getAttribute('data-project-name');
                if (projectName.includes(searchValue)) {
                    project.style.display = '';
                } else {
                    project.style.display = 'none';
                }
            });
        });
 
    </script>
}
