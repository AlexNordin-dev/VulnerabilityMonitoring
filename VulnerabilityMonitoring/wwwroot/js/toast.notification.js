"use strict";
function showToastNotification(status, message) {
   //console.log('toast-status:', status);
   //console.log('toast-meddelande:', message);

   var statusLowerCase = status.toLowerCase();
   var statusText = status.charAt(0).toUpperCase() + status.slice(1);
   var toastHTML = `
       <div class="toast ${GetColorClass(statusLowerCase)}" role="alert" aria-live="assertive" aria-atomic="true">
           <div class="toast-header">
           <span class="me-2"><i class="toast-icon fa ${GetIconClass(statusLowerCase)}"></i></span>
               <strong class="me-auto">${statusText}</strong>
               <small>${new Date().toLocaleTimeString()}</small>
               <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
           </div>
           <div class="toast-body">
               ${message}
           </div>
       </div>
   `;

    var toastContainer = $('#toast-container');
   /* console.log('toast-toastContainer:', toastContainer);*/
    toastContainer.append(toastHTML); // Lägg till toast HTML i toast-container
    /*console.log($( '.toast').last());*/
   $('.toast').last().toast('show'); // Visa den senast tillagda toasten

   // Hantering av toast-footer animation
   var toastFooter = $('.toast-header').last(); // Referera till senaste toast-header
   toastFooter.css('overflow', 'hidden');
   var toastFooterLine = $('<div class="toast-footer-line"></div>').appendTo(toastFooter);
   setTimeout(function () {
       toastFooterLine.addClass('animate-toast-line');
   }, 100); // Fördröjning för att starta animationen efter att toasten
   
  
}
$(document).ready(function () {
    // Lägg till händelsehanterare för mouseenter och mouseleave på toast-container
    $('#toast-container').on('mouseenter', '.toast', function () {
        pauseToastAnimation($(this));
    }).on('mouseleave', '.toast', function () {
        resumeToastAnimation($(this), 4.9); // Återuppta med 30,5 sekunder varaktighet
    });
});

function pauseToastAnimation(toastElement) {
    var footerLine = toastElement.find('.toast-footer-line');
    // Ta bort nuvarande animation och spara nuvarande bredd
    footerLine.css({
        animation: 'none',
      
    });
}

function resumeToastAnimation(toastElement, duration) {
    var footerLine = toastElement.find('.toast-footer-line');
    // Sätt en ny animation med ny varaktighet och startar från nuvarande bredd
    footerLine.css({
        animation: '',
        animationName: 'decreaseWidth',
        animationDuration: duration + 's',
        animationFillMode: 'forwards',
        animationTimingFunction: 'linear'
    });
}

function GetColorClass(statusLowerCase) {
   switch (statusLowerCase) {
       case "success":
           return "bg-success text-white";
       case "info":
           return "bg-info text-dark";
       case "warning":
           return "bg-warning text-dark";
       case "error":
           return "bg-danger text-white";
       default:
           return "bg-secondary text-light";
   }
}



function GetIconClass(statusLowerCase) {
   switch (statusLowerCase) {
       case "success":
           return "fa-check-circle";
       case "info":
           return "fa-info-circle";
       case "warning":
           return "fa-exclamation-triangle";
       case "error":
           return "fa-exclamation-circle";
       default:
           return "fa-question-circle";
   }
}

